#!/usr/bin/env node

// MiniDocs: sehr einfacher Static Site Generator

// - build: Markdown in HTML umwandeln

// - serve: dist/ lokal ausliefern



const fs = require("fs");

const path = require("path");

const http = require("http");

const { marked } = require("marked"); // v4: CommonJS kompatibel



// --- Hilfen ---

function readConfig() {

  const raw = fs.readFileSync("config.json", "utf8");

  return JSON.parse(raw);

}



function ensureDir(p) {

  fs.mkdirSync(p, { recursive: true });

}



function listMarkdownFiles(dir) {

  // NUR .md nehmen; andere Dateien ignorieren (anfängerfreundlich)

  return fs.readdirSync(dir)

    .filter((f) => f.toLowerCase().endsWith(".md"))

    .map((f) => path.join(dir, f))

    .sort();

}



function mdFileToTitle(filePath) {

  // Seitentitel = Dateiname ohne .md, hübsch gemacht

  const base = path.basename(filePath, ".md");

  return base.replace(/[-_]/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());

}



// sehr einfaches CSS + Layout

function baseTemplate({ siteTitle, pageTitle, navHtml, contentHtml }) {

  return `<!doctype html>

<html lang="de">

<head>

  <meta charset="utf-8">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <title>${pageTitle} - ${siteTitle}</title>

  <style>

    :root { --bg:#fff; --fg:#111; --muted:#666; --accent:#005bbb; --border:#ddd; }

    body { margin:0; font-family: system-ui, sans-serif; background:var(--bg); color:var(--fg); }

    header { padding:1rem; border-bottom:1px solid var(--border); display:flex; gap:1rem; align-items:baseline;}

    header h1 { font-size:1.2rem; margin:0; }

    nav a { margin-right:.75rem; text-decoration:none; color:var(--accent); }

    main { max-width: 900px; margin: 1.5rem auto; padding: 0 1rem; }

    footer { border-top:1px solid var(--border); color:var(--muted); font-size:.9rem; padding:1rem; text-align:center; }

    pre, code { background:#f6f8fa; padding:.2rem .4rem; border-radius:6px; }

  </style>

</head>

<body>

  <header>

    <h1>${siteTitle}</h1>

    <nav>${navHtml}</nav>

  </header>

  <main>

    ${contentHtml}

  </main>

  <footer>Generated by MiniDocs</footer>

</body>

</html>`;

}



function makeNav(items, outDir) {

  // items: [{title, outFile}]

  return items.map(i => `<a href="${path.basename(i.outFile)}">${i.title}</a>`).join("");

}



// --- Kern: Build ---

function build() {

  const cfg = readConfig();

  ensureDir(cfg.outDir);



  const files = listMarkdownFiles(cfg.contentDir);

  const pages = files.map((fp) => {

    const md = fs.readFileSync(fp, "utf8");

    const html = marked(md);

    const title = md.split("\n")[0]?.replace(/^#\s*/, "").trim() || mdFileToTitle(fp);

    const outName = path.basename(fp, ".md") + ".html";

    const outFile = path.join(cfg.outDir, outName);

    return { title, html, outFile };

  });



  // Navigation erzeugen

  const nav = makeNav(pages.map(p => ({ title: p.title, outFile: p.outFile })), cfg.outDir);



  // Einzelne Seiten rendern

  pages.forEach((p) => {

    const pageHtml = baseTemplate({

      siteTitle: cfg.siteTitle,

      pageTitle: p.title,

      navHtml: nav,

      contentHtml: p.html

    });

    fs.writeFileSync(p.outFile, pageHtml, "utf8");

  });



  // index.html erzeugen (kleine Übersicht)

  const list = pages.map(p => `<li><a href="${path.basename(p.outFile)}">${p.title}</a></li>`).join("");

  const indexHtml = baseTemplate({

    siteTitle: cfg.siteTitle,

    pageTitle: "Übersicht",

    navHtml: nav,

    contentHtml: `<h2>Inhalte</h2><ul>${list}</ul>`

  });

  fs.writeFileSync(path.join(cfg.outDir, "index.html"), indexHtml, "utf8");



  console.log(`✅ Build fertig: ${cfg.outDir}/ (inkl. index.html)`);

}



// --- Einfacher lokaler Server ---

function serve() {

  const cfg = readConfig();

  const root = path.resolve(cfg.outDir);

  const port = Number(cfg.port || 3000);



  // Falls noch nicht gebaut wurde, jetzt bauen (anfängerfreundlich)

  if (!fs.existsSync(root) || fs.readdirSync(root).length === 0) build();



  const server = http.createServer((req, res) => {

    const reqPath = decodeURIComponent(req.url.split("?")[0]);

    let filePath = path.join(root, reqPath);

    if (reqPath === "/" || !path.extname(reqPath)) {

      filePath = path.join(root, "index.html");

    }

    fs.readFile(filePath, (err, data) => {

      if (err) {

        res.writeHead(404, { "Content-Type": "text/plain; charset=utf-8" });

        res.end("404 – Nicht gefunden");

        return;

      }

      const ext = path.extname(filePath).toLowerCase();

      const type = ext === ".html" ? "text/html; charset=utf-8" : "text/plain; charset=utf-8";

      res.writeHead(200, { "Content-Type": type });

      res.end(data);

    });

  });



  server.listen(port, () => {

    console.log(`🌐 MiniDocs läuft: http://localhost:${port}`);

  });

}



// --- CLI ---

const cmd = process.argv[2];

if (cmd === "build") build();

else if (cmd === "serve") serve();

else {

  console.log("Nutzung:");

  console.log("  node index.js build   # Markdown -> HTML");

  console.log("  node index.js serve   # lokalen Server starten");

  process.exit(1);

}



// Für Tests exportieren:

module.exports = { build, listMarkdownFiles, baseTemplate };



